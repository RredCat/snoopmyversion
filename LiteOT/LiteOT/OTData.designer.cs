#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LiteOT
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="ontime_es")]
	public partial class OTDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertDefect(Defect instance);
    partial void UpdateDefect(Defect instance);
    partial void DeleteDefect(Defect instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    #endregion
		
		public OTDataDataContext() : 
				base(global::LiteOT.Properties.Settings.Default.ontime_esConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public OTDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OTDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OTDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OTDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Defect> Defects
		{
			get
			{
				return this.GetTable<Defect>();
			}
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
	}
	
	[Table(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email;
		
		private string _LoginId;
		
		private string _Password;
		
		private string _WindowsId;
		
		private bool _UseWindowsAuth;
		
		private bool _BuiltInAccount;
		
		private bool _IsActive;
		
		private bool _UseWindowsClient;
		
		private bool _UseWebClient;
		
		private bool _UseVSClient;
		
		private bool _UseMixedMode;
		
		private int _EnterpriseConnectionType;
		
		private string _SettingsXml;
		
		private System.Nullable<System.DateTime> _LastLoginDateTime;
		
		private EntitySet<Defect> _Defects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnLoginIdChanging(string value);
    partial void OnLoginIdChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnWindowsIdChanging(string value);
    partial void OnWindowsIdChanged();
    partial void OnUseWindowsAuthChanging(bool value);
    partial void OnUseWindowsAuthChanged();
    partial void OnBuiltInAccountChanging(bool value);
    partial void OnBuiltInAccountChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnUseWindowsClientChanging(bool value);
    partial void OnUseWindowsClientChanged();
    partial void OnUseWebClientChanging(bool value);
    partial void OnUseWebClientChanged();
    partial void OnUseVSClientChanging(bool value);
    partial void OnUseVSClientChanged();
    partial void OnUseMixedModeChanging(bool value);
    partial void OnUseMixedModeChanged();
    partial void OnEnterpriseConnectionTypeChanging(int value);
    partial void OnEnterpriseConnectionTypeChanged();
    partial void OnSettingsXmlChanging(string value);
    partial void OnSettingsXmlChanged();
    partial void OnLastLoginDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastLoginDateTimeChanged();
    #endregion
		
		public User()
		{
			this._Defects = new EntitySet<Defect>(new Action<Defect>(this.attach_Defects), new Action<Defect>(this.detach_Defects));
			OnCreated();
		}
		
		[Column(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_LoginId", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string LoginId
		{
			get
			{
				return this._LoginId;
			}
			set
			{
				if ((this._LoginId != value))
				{
					this.OnLoginIdChanging(value);
					this.SendPropertyChanging();
					this._LoginId = value;
					this.SendPropertyChanged("LoginId");
					this.OnLoginIdChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_WindowsId", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string WindowsId
		{
			get
			{
				return this._WindowsId;
			}
			set
			{
				if ((this._WindowsId != value))
				{
					this.OnWindowsIdChanging(value);
					this.SendPropertyChanging();
					this._WindowsId = value;
					this.SendPropertyChanged("WindowsId");
					this.OnWindowsIdChanged();
				}
			}
		}
		
		[Column(Storage="_UseWindowsAuth", DbType="Bit NOT NULL")]
		public bool UseWindowsAuth
		{
			get
			{
				return this._UseWindowsAuth;
			}
			set
			{
				if ((this._UseWindowsAuth != value))
				{
					this.OnUseWindowsAuthChanging(value);
					this.SendPropertyChanging();
					this._UseWindowsAuth = value;
					this.SendPropertyChanged("UseWindowsAuth");
					this.OnUseWindowsAuthChanged();
				}
			}
		}
		
		[Column(Storage="_BuiltInAccount", DbType="Bit NOT NULL")]
		public bool BuiltInAccount
		{
			get
			{
				return this._BuiltInAccount;
			}
			set
			{
				if ((this._BuiltInAccount != value))
				{
					this.OnBuiltInAccountChanging(value);
					this.SendPropertyChanging();
					this._BuiltInAccount = value;
					this.SendPropertyChanged("BuiltInAccount");
					this.OnBuiltInAccountChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_UseWindowsClient", DbType="Bit NOT NULL")]
		public bool UseWindowsClient
		{
			get
			{
				return this._UseWindowsClient;
			}
			set
			{
				if ((this._UseWindowsClient != value))
				{
					this.OnUseWindowsClientChanging(value);
					this.SendPropertyChanging();
					this._UseWindowsClient = value;
					this.SendPropertyChanged("UseWindowsClient");
					this.OnUseWindowsClientChanged();
				}
			}
		}
		
		[Column(Storage="_UseWebClient", DbType="Bit NOT NULL")]
		public bool UseWebClient
		{
			get
			{
				return this._UseWebClient;
			}
			set
			{
				if ((this._UseWebClient != value))
				{
					this.OnUseWebClientChanging(value);
					this.SendPropertyChanging();
					this._UseWebClient = value;
					this.SendPropertyChanged("UseWebClient");
					this.OnUseWebClientChanged();
				}
			}
		}
		
		[Column(Storage="_UseVSClient", DbType="Bit NOT NULL")]
		public bool UseVSClient
		{
			get
			{
				return this._UseVSClient;
			}
			set
			{
				if ((this._UseVSClient != value))
				{
					this.OnUseVSClientChanging(value);
					this.SendPropertyChanging();
					this._UseVSClient = value;
					this.SendPropertyChanged("UseVSClient");
					this.OnUseVSClientChanged();
				}
			}
		}
		
		[Column(Storage="_UseMixedMode", DbType="Bit NOT NULL")]
		public bool UseMixedMode
		{
			get
			{
				return this._UseMixedMode;
			}
			set
			{
				if ((this._UseMixedMode != value))
				{
					this.OnUseMixedModeChanging(value);
					this.SendPropertyChanging();
					this._UseMixedMode = value;
					this.SendPropertyChanged("UseMixedMode");
					this.OnUseMixedModeChanged();
				}
			}
		}
		
		[Column(Storage="_EnterpriseConnectionType", DbType="Int NOT NULL")]
		public int EnterpriseConnectionType
		{
			get
			{
				return this._EnterpriseConnectionType;
			}
			set
			{
				if ((this._EnterpriseConnectionType != value))
				{
					this.OnEnterpriseConnectionTypeChanging(value);
					this.SendPropertyChanging();
					this._EnterpriseConnectionType = value;
					this.SendPropertyChanged("EnterpriseConnectionType");
					this.OnEnterpriseConnectionTypeChanged();
				}
			}
		}
		
		[Column(Storage="_SettingsXml", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SettingsXml
		{
			get
			{
				return this._SettingsXml;
			}
			set
			{
				if ((this._SettingsXml != value))
				{
					this.OnSettingsXmlChanging(value);
					this.SendPropertyChanging();
					this._SettingsXml = value;
					this.SendPropertyChanged("SettingsXml");
					this.OnSettingsXmlChanged();
				}
			}
		}
		
		[Column(Storage="_LastLoginDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastLoginDateTime
		{
			get
			{
				return this._LastLoginDateTime;
			}
			set
			{
				if ((this._LastLoginDateTime != value))
				{
					this.OnLastLoginDateTimeChanging(value);
					this.SendPropertyChanging();
					this._LastLoginDateTime = value;
					this.SendPropertyChanged("LastLoginDateTime");
					this.OnLastLoginDateTimeChanged();
				}
			}
		}
		
		[Association(Name="User_Defect", Storage="_Defects", ThisKey="UserId", OtherKey="AssignedToId")]
		public EntitySet<Defect> Defects
		{
			get
			{
				return this._Defects;
			}
			set
			{
				this._Defects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Defects(Defect entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Defects(Defect entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[Table(Name="dbo.Defects")]
	public partial class Defect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DefectId;
		
		private int _ProjectId;
		
		private int _CreatorId;
		
		private int _ReportedById;
		
		private int _AssignedToId;
		
		private int _PriorityTypeId;
		
		private int _StatusTypeId;
		
		private int _SeverityTypeId;
		
		private string _Name;
		
		private string _BuildNumber;
		
		private float _EstimatedDuration;
		
		private int _DurationUnitTypeId;
		
		private float _ActualDuration;
		
		private int _ActualUnitTypeId;
		
		private System.DateTime _DateFound;
		
		private System.DateTime _DateFixed;
		
		private string _BuildNumberOfFix;
		
		private System.Data.Linq.Binary _LastUpdated;
		
		private int _WorkflowStepId;
		
		private byte _PercentComplete;
		
		private int _LastUpdatedById;
		
		private System.DateTime _LastUpdatedDateTime;
		
		private System.DateTime _CreatedDateTime;
		
		private bool _PubliclyViewable;
		
		private int _ReportedByCustomerContactId;
		
		private string _Description;
		
		private string _ReplicationProcedures;
		
		private string _Resolution;
		
		private string _Notes;
		
		private bool _Archived;
		
		private System.DateTime _DueDate;
		
		private EntitySet<Project> _Projects;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDefectIdChanging(int value);
    partial void OnDefectIdChanged();
    partial void OnProjectIdChanging(int value);
    partial void OnProjectIdChanged();
    partial void OnCreatorIdChanging(int value);
    partial void OnCreatorIdChanged();
    partial void OnReportedByIdChanging(int value);
    partial void OnReportedByIdChanged();
    partial void OnAssignedToIdChanging(int value);
    partial void OnAssignedToIdChanged();
    partial void OnPriorityTypeIdChanging(int value);
    partial void OnPriorityTypeIdChanged();
    partial void OnStatusTypeIdChanging(int value);
    partial void OnStatusTypeIdChanged();
    partial void OnSeverityTypeIdChanging(int value);
    partial void OnSeverityTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBuildNumberChanging(string value);
    partial void OnBuildNumberChanged();
    partial void OnEstimatedDurationChanging(float value);
    partial void OnEstimatedDurationChanged();
    partial void OnDurationUnitTypeIdChanging(int value);
    partial void OnDurationUnitTypeIdChanged();
    partial void OnActualDurationChanging(float value);
    partial void OnActualDurationChanged();
    partial void OnActualUnitTypeIdChanging(int value);
    partial void OnActualUnitTypeIdChanged();
    partial void OnDateFoundChanging(System.DateTime value);
    partial void OnDateFoundChanged();
    partial void OnDateFixedChanging(System.DateTime value);
    partial void OnDateFixedChanged();
    partial void OnBuildNumberOfFixChanging(string value);
    partial void OnBuildNumberOfFixChanged();
    partial void OnLastUpdatedChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdatedChanged();
    partial void OnWorkflowStepIdChanging(int value);
    partial void OnWorkflowStepIdChanged();
    partial void OnPercentCompleteChanging(byte value);
    partial void OnPercentCompleteChanged();
    partial void OnLastUpdatedByIdChanging(int value);
    partial void OnLastUpdatedByIdChanged();
    partial void OnLastUpdatedDateTimeChanging(System.DateTime value);
    partial void OnLastUpdatedDateTimeChanged();
    partial void OnCreatedDateTimeChanging(System.DateTime value);
    partial void OnCreatedDateTimeChanged();
    partial void OnPubliclyViewableChanging(bool value);
    partial void OnPubliclyViewableChanged();
    partial void OnReportedByCustomerContactIdChanging(int value);
    partial void OnReportedByCustomerContactIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnReplicationProceduresChanging(string value);
    partial void OnReplicationProceduresChanged();
    partial void OnResolutionChanging(string value);
    partial void OnResolutionChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnArchivedChanging(bool value);
    partial void OnArchivedChanged();
    partial void OnDueDateChanging(System.DateTime value);
    partial void OnDueDateChanged();
    #endregion
		
		public Defect()
		{
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_DefectId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int DefectId
		{
			get
			{
				return this._DefectId;
			}
			set
			{
				if ((this._DefectId != value))
				{
					this.OnDefectIdChanging(value);
					this.SendPropertyChanging();
					this._DefectId = value;
					this.SendPropertyChanged("DefectId");
					this.OnDefectIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[Column(Storage="_CreatorId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CreatorId
		{
			get
			{
				return this._CreatorId;
			}
			set
			{
				if ((this._CreatorId != value))
				{
					this.OnCreatorIdChanging(value);
					this.SendPropertyChanging();
					this._CreatorId = value;
					this.SendPropertyChanged("CreatorId");
					this.OnCreatorIdChanged();
				}
			}
		}
		
		[Column(Storage="_ReportedById", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ReportedById
		{
			get
			{
				return this._ReportedById;
			}
			set
			{
				if ((this._ReportedById != value))
				{
					this.OnReportedByIdChanging(value);
					this.SendPropertyChanging();
					this._ReportedById = value;
					this.SendPropertyChanged("ReportedById");
					this.OnReportedByIdChanged();
				}
			}
		}
		
		[Column(Storage="_AssignedToId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int AssignedToId
		{
			get
			{
				return this._AssignedToId;
			}
			set
			{
				if ((this._AssignedToId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssignedToIdChanging(value);
					this.SendPropertyChanging();
					this._AssignedToId = value;
					this.SendPropertyChanged("AssignedToId");
					this.OnAssignedToIdChanged();
				}
			}
		}
		
		[Column(Storage="_PriorityTypeId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int PriorityTypeId
		{
			get
			{
				return this._PriorityTypeId;
			}
			set
			{
				if ((this._PriorityTypeId != value))
				{
					this.OnPriorityTypeIdChanging(value);
					this.SendPropertyChanging();
					this._PriorityTypeId = value;
					this.SendPropertyChanged("PriorityTypeId");
					this.OnPriorityTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_StatusTypeId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int StatusTypeId
		{
			get
			{
				return this._StatusTypeId;
			}
			set
			{
				if ((this._StatusTypeId != value))
				{
					this.OnStatusTypeIdChanging(value);
					this.SendPropertyChanging();
					this._StatusTypeId = value;
					this.SendPropertyChanged("StatusTypeId");
					this.OnStatusTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_SeverityTypeId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SeverityTypeId
		{
			get
			{
				return this._SeverityTypeId;
			}
			set
			{
				if ((this._SeverityTypeId != value))
				{
					this.OnSeverityTypeIdChanging(value);
					this.SendPropertyChanging();
					this._SeverityTypeId = value;
					this.SendPropertyChanged("SeverityTypeId");
					this.OnSeverityTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_BuildNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string BuildNumber
		{
			get
			{
				return this._BuildNumber;
			}
			set
			{
				if ((this._BuildNumber != value))
				{
					this.OnBuildNumberChanging(value);
					this.SendPropertyChanging();
					this._BuildNumber = value;
					this.SendPropertyChanged("BuildNumber");
					this.OnBuildNumberChanged();
				}
			}
		}
		
		[Column(Storage="_EstimatedDuration", DbType="Real NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public float EstimatedDuration
		{
			get
			{
				return this._EstimatedDuration;
			}
			set
			{
				if ((this._EstimatedDuration != value))
				{
					this.OnEstimatedDurationChanging(value);
					this.SendPropertyChanging();
					this._EstimatedDuration = value;
					this.SendPropertyChanged("EstimatedDuration");
					this.OnEstimatedDurationChanged();
				}
			}
		}
		
		[Column(Storage="_DurationUnitTypeId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int DurationUnitTypeId
		{
			get
			{
				return this._DurationUnitTypeId;
			}
			set
			{
				if ((this._DurationUnitTypeId != value))
				{
					this.OnDurationUnitTypeIdChanging(value);
					this.SendPropertyChanging();
					this._DurationUnitTypeId = value;
					this.SendPropertyChanged("DurationUnitTypeId");
					this.OnDurationUnitTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_ActualDuration", DbType="Real NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public float ActualDuration
		{
			get
			{
				return this._ActualDuration;
			}
			set
			{
				if ((this._ActualDuration != value))
				{
					this.OnActualDurationChanging(value);
					this.SendPropertyChanging();
					this._ActualDuration = value;
					this.SendPropertyChanged("ActualDuration");
					this.OnActualDurationChanged();
				}
			}
		}
		
		[Column(Storage="_ActualUnitTypeId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ActualUnitTypeId
		{
			get
			{
				return this._ActualUnitTypeId;
			}
			set
			{
				if ((this._ActualUnitTypeId != value))
				{
					this.OnActualUnitTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ActualUnitTypeId = value;
					this.SendPropertyChanged("ActualUnitTypeId");
					this.OnActualUnitTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_DateFound", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime DateFound
		{
			get
			{
				return this._DateFound;
			}
			set
			{
				if ((this._DateFound != value))
				{
					this.OnDateFoundChanging(value);
					this.SendPropertyChanging();
					this._DateFound = value;
					this.SendPropertyChanged("DateFound");
					this.OnDateFoundChanged();
				}
			}
		}
		
		[Column(Storage="_DateFixed", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime DateFixed
		{
			get
			{
				return this._DateFixed;
			}
			set
			{
				if ((this._DateFixed != value))
				{
					this.OnDateFixedChanging(value);
					this.SendPropertyChanging();
					this._DateFixed = value;
					this.SendPropertyChanged("DateFixed");
					this.OnDateFixedChanged();
				}
			}
		}
		
		[Column(Storage="_BuildNumberOfFix", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string BuildNumberOfFix
		{
			get
			{
				return this._BuildNumberOfFix;
			}
			set
			{
				if ((this._BuildNumberOfFix != value))
				{
					this.OnBuildNumberOfFixChanging(value);
					this.SendPropertyChanging();
					this._BuildNumberOfFix = value;
					this.SendPropertyChanged("BuildNumberOfFix");
					this.OnBuildNumberOfFixChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdated", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdated
		{
			get
			{
				return this._LastUpdated;
			}
			set
			{
				if ((this._LastUpdated != value))
				{
					this.OnLastUpdatedChanging(value);
					this.SendPropertyChanging();
					this._LastUpdated = value;
					this.SendPropertyChanged("LastUpdated");
					this.OnLastUpdatedChanged();
				}
			}
		}
		
		[Column(Storage="_WorkflowStepId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int WorkflowStepId
		{
			get
			{
				return this._WorkflowStepId;
			}
			set
			{
				if ((this._WorkflowStepId != value))
				{
					this.OnWorkflowStepIdChanging(value);
					this.SendPropertyChanging();
					this._WorkflowStepId = value;
					this.SendPropertyChanged("WorkflowStepId");
					this.OnWorkflowStepIdChanged();
				}
			}
		}
		
		[Column(Storage="_PercentComplete", DbType="TinyInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public byte PercentComplete
		{
			get
			{
				return this._PercentComplete;
			}
			set
			{
				if ((this._PercentComplete != value))
				{
					this.OnPercentCompleteChanging(value);
					this.SendPropertyChanging();
					this._PercentComplete = value;
					this.SendPropertyChanged("PercentComplete");
					this.OnPercentCompleteChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdatedById", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastUpdatedById
		{
			get
			{
				return this._LastUpdatedById;
			}
			set
			{
				if ((this._LastUpdatedById != value))
				{
					this.OnLastUpdatedByIdChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedById = value;
					this.SendPropertyChanged("LastUpdatedById");
					this.OnLastUpdatedByIdChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdatedDateTime", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastUpdatedDateTime
		{
			get
			{
				return this._LastUpdatedDateTime;
			}
			set
			{
				if ((this._LastUpdatedDateTime != value))
				{
					this.OnLastUpdatedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedDateTime = value;
					this.SendPropertyChanged("LastUpdatedDateTime");
					this.OnLastUpdatedDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this.OnCreatedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedDateTime = value;
					this.SendPropertyChanged("CreatedDateTime");
					this.OnCreatedDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_PubliclyViewable", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool PubliclyViewable
		{
			get
			{
				return this._PubliclyViewable;
			}
			set
			{
				if ((this._PubliclyViewable != value))
				{
					this.OnPubliclyViewableChanging(value);
					this.SendPropertyChanging();
					this._PubliclyViewable = value;
					this.SendPropertyChanged("PubliclyViewable");
					this.OnPubliclyViewableChanged();
				}
			}
		}
		
		[Column(Storage="_ReportedByCustomerContactId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ReportedByCustomerContactId
		{
			get
			{
				return this._ReportedByCustomerContactId;
			}
			set
			{
				if ((this._ReportedByCustomerContactId != value))
				{
					this.OnReportedByCustomerContactIdChanging(value);
					this.SendPropertyChanging();
					this._ReportedByCustomerContactId = value;
					this.SendPropertyChanged("ReportedByCustomerContactId");
					this.OnReportedByCustomerContactIdChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_ReplicationProcedures", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ReplicationProcedures
		{
			get
			{
				return this._ReplicationProcedures;
			}
			set
			{
				if ((this._ReplicationProcedures != value))
				{
					this.OnReplicationProceduresChanging(value);
					this.SendPropertyChanging();
					this._ReplicationProcedures = value;
					this.SendPropertyChanged("ReplicationProcedures");
					this.OnReplicationProceduresChanged();
				}
			}
		}
		
		[Column(Storage="_Resolution", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Resolution
		{
			get
			{
				return this._Resolution;
			}
			set
			{
				if ((this._Resolution != value))
				{
					this.OnResolutionChanging(value);
					this.SendPropertyChanging();
					this._Resolution = value;
					this.SendPropertyChanged("Resolution");
					this.OnResolutionChanged();
				}
			}
		}
		
		[Column(Storage="_Notes", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Column(Storage="_Archived", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool Archived
		{
			get
			{
				return this._Archived;
			}
			set
			{
				if ((this._Archived != value))
				{
					this.OnArchivedChanging(value);
					this.SendPropertyChanging();
					this._Archived = value;
					this.SendPropertyChanged("Archived");
					this.OnArchivedChanged();
				}
			}
		}
		
		[Column(Storage="_DueDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime DueDate
		{
			get
			{
				return this._DueDate;
			}
			set
			{
				if ((this._DueDate != value))
				{
					this.OnDueDateChanging(value);
					this.SendPropertyChanging();
					this._DueDate = value;
					this.SendPropertyChanged("DueDate");
					this.OnDueDateChanged();
				}
			}
		}
		
		[Association(Name="Defect_Project", Storage="_Projects", ThisKey="ProjectId", OtherKey="ProjectId")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		[Association(Name="User_Defect", Storage="_User", ThisKey="AssignedToId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Defects.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Defects.Add(this);
						this._AssignedToId = value.UserId;
					}
					else
					{
						this._AssignedToId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Defect = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Defect = null;
		}
	}
	
	[Table(Name="dbo.Projects")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectId;
		
		private int _ParentId;
		
		private string _Name;
		
		private string _Description;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _DueDate;
		
		private bool _IsActive;
		
		private string _Path;
		
		private EntityRef<Defect> _Defect;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectIdChanging(int value);
    partial void OnProjectIdChanged();
    partial void OnParentIdChanging(int value);
    partial void OnParentIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnDueDateChanging(System.DateTime value);
    partial void OnDueDateChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    #endregion
		
		public Project()
		{
			this._Defect = default(EntityRef<Defect>);
			OnCreated();
		}
		
		[Column(Storage="_ProjectId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					if (this._Defect.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[Column(Storage="_ParentId", DbType="Int NOT NULL")]
		public int ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_DueDate", DbType="DateTime NOT NULL")]
		public System.DateTime DueDate
		{
			get
			{
				return this._DueDate;
			}
			set
			{
				if ((this._DueDate != value))
				{
					this.OnDueDateChanging(value);
					this.SendPropertyChanging();
					this._DueDate = value;
					this.SendPropertyChanged("DueDate");
					this.OnDueDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Path", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[Association(Name="Defect_Project", Storage="_Defect", ThisKey="ProjectId", OtherKey="ProjectId", IsForeignKey=true)]
		public Defect Defect
		{
			get
			{
				return this._Defect.Entity;
			}
			set
			{
				Defect previousValue = this._Defect.Entity;
				if (((previousValue != value) 
							|| (this._Defect.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Defect.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._Defect.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._ProjectId = value.ProjectId;
					}
					else
					{
						this._ProjectId = default(int);
					}
					this.SendPropertyChanged("Defect");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
